{"ast":null,"code":"/**\n * @import {Visitor} from 'unist-util-visit'\n * @import {ElementContent, Nodes} from 'hast'\n * @import {Direction, State} from './index.js'\n */\n\nimport { direction } from 'direction';\nimport { toString } from 'hast-util-to-string';\nimport { svg } from 'property-information';\nimport { EXIT, SKIP, visit } from 'unist-util-visit';\n\n/**\n * Enter a node.\n *\n * The caller is responsible for calling the return value `exit`.\n *\n * @param {State} state\n *   Current state.\n *\n *   Will be mutated: `exit` undos the changes.\n * @param {Nodes} node\n *   Node to enter.\n * @returns {() => undefined}\n *   Call to exit.\n */\n// eslint-disable-next-line complexity\nexport function enterState(state, node) {\n  const schema = state.schema;\n  const language = state.language;\n  const currentDirection = state.direction;\n  const editableOrEditingHost = state.editableOrEditingHost;\n  /** @type {Direction | undefined} */\n  let directionInferred;\n  if (node.type === 'element') {\n    const lang = node.properties.xmlLang || node.properties.lang;\n    const type = node.properties.type || 'text';\n    const direction = directionProperty(node);\n    if (lang !== null && lang !== undefined) {\n      state.language = String(lang);\n    }\n    if (schema && schema.space === 'html') {\n      if (node.properties.contentEditable === 'true') {\n        state.editableOrEditingHost = true;\n      }\n      if (node.tagName === 'svg') {\n        state.schema = svg;\n      }\n\n      // See: <https://html.spec.whatwg.org/#the-directionality>.\n      // Explicit `[dir=rtl]`.\n      if (direction === 'rtl') {\n        directionInferred = direction;\n      } else if (\n      // Explicit `[dir=ltr]`.\n      direction === 'ltr' ||\n      // HTML with an invalid or no `[dir]`.\n      direction !== 'auto' && node.tagName === 'html' ||\n      // `input[type=tel]` with an invalid or no `[dir]`.\n      direction !== 'auto' && node.tagName === 'input' && type === 'tel') {\n        directionInferred = 'ltr';\n        // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.\n      } else if (direction === 'auto' || node.tagName === 'bdi') {\n        if (node.tagName === 'textarea') {\n          // Check contents of `<textarea>`.\n          directionInferred = directionBidi(toString(node));\n        } else if (node.tagName === 'input' && (type === 'email' || type === 'search' || type === 'tel' || type === 'text')) {\n          // Check value of `<input>`.\n          directionInferred = node.properties.value ? directionBidi(String(node.properties.value)) : 'ltr';\n        } else {\n          // Check text nodes in `node`.\n          visit(node, inferDirectionality);\n        }\n      }\n      if (directionInferred) {\n        state.direction = directionInferred;\n      }\n    }\n    // Turn off editing mode in non-HTML spaces.\n    else if (state.editableOrEditingHost) {\n      state.editableOrEditingHost = false;\n    }\n  }\n  return reset;\n\n  /**\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function reset() {\n    state.schema = schema;\n    state.language = language;\n    state.direction = currentDirection;\n    state.editableOrEditingHost = editableOrEditingHost;\n  }\n\n  /** @type {Visitor<ElementContent>} */\n  function inferDirectionality(child) {\n    if (child.type === 'text') {\n      directionInferred = directionBidi(child.value);\n      return directionInferred ? EXIT : undefined;\n    }\n    if (child !== node && child.type === 'element' && (child.tagName === 'bdi' || child.tagName === 'script' || child.tagName === 'style' || child.tagName === 'textare' || directionProperty(child))) {\n      return SKIP;\n    }\n  }\n}\n\n/**\n * See `wooorm/direction`.\n *\n * @param {string} value\n *   Value to check.\n * @returns {Exclude<Direction, 'auto'> | undefined}\n *   Directionality.\n */\nfunction directionBidi(value) {\n  const result = direction(value);\n  return result === 'neutral' ? undefined : result;\n}\n\n/**\n * @param {ElementContent} node\n *   Node to check.\n * @returns {Direction | undefined}\n *   Directionality.\n */\nfunction directionProperty(node) {\n  const value = node.type === 'element' && typeof node.properties.dir === 'string' ? node.properties.dir.toLowerCase() : undefined;\n  return value === 'auto' || value === 'ltr' || value === 'rtl' ? value : undefined;\n}","map":{"version":3,"names":["direction","toString","svg","EXIT","SKIP","visit","enterState","state","node","schema","language","currentDirection","editableOrEditingHost","directionInferred","type","lang","properties","xmlLang","directionProperty","undefined","String","space","contentEditable","tagName","directionBidi","value","inferDirectionality","reset","child","result","dir","toLowerCase"],"sources":["/Users/mubarakmuse/Abubakar-Islamic-Institute-LMS/node_modules/hast-util-select/lib/enter-state.js"],"sourcesContent":["/**\n * @import {Visitor} from 'unist-util-visit'\n * @import {ElementContent, Nodes} from 'hast'\n * @import {Direction, State} from './index.js'\n */\n\nimport {direction} from 'direction'\nimport {toString} from 'hast-util-to-string'\nimport {svg} from 'property-information'\nimport {EXIT, SKIP, visit} from 'unist-util-visit'\n\n/**\n * Enter a node.\n *\n * The caller is responsible for calling the return value `exit`.\n *\n * @param {State} state\n *   Current state.\n *\n *   Will be mutated: `exit` undos the changes.\n * @param {Nodes} node\n *   Node to enter.\n * @returns {() => undefined}\n *   Call to exit.\n */\n// eslint-disable-next-line complexity\nexport function enterState(state, node) {\n  const schema = state.schema\n  const language = state.language\n  const currentDirection = state.direction\n  const editableOrEditingHost = state.editableOrEditingHost\n  /** @type {Direction | undefined} */\n  let directionInferred\n\n  if (node.type === 'element') {\n    const lang = node.properties.xmlLang || node.properties.lang\n    const type = node.properties.type || 'text'\n    const direction = directionProperty(node)\n\n    if (lang !== null && lang !== undefined) {\n      state.language = String(lang)\n    }\n\n    if (schema && schema.space === 'html') {\n      if (node.properties.contentEditable === 'true') {\n        state.editableOrEditingHost = true\n      }\n\n      if (node.tagName === 'svg') {\n        state.schema = svg\n      }\n\n      // See: <https://html.spec.whatwg.org/#the-directionality>.\n      // Explicit `[dir=rtl]`.\n      if (direction === 'rtl') {\n        directionInferred = direction\n      } else if (\n        // Explicit `[dir=ltr]`.\n        direction === 'ltr' ||\n        // HTML with an invalid or no `[dir]`.\n        (direction !== 'auto' && node.tagName === 'html') ||\n        // `input[type=tel]` with an invalid or no `[dir]`.\n        (direction !== 'auto' && node.tagName === 'input' && type === 'tel')\n      ) {\n        directionInferred = 'ltr'\n        // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.\n      } else if (direction === 'auto' || node.tagName === 'bdi') {\n        if (node.tagName === 'textarea') {\n          // Check contents of `<textarea>`.\n          directionInferred = directionBidi(toString(node))\n        } else if (\n          node.tagName === 'input' &&\n          (type === 'email' ||\n            type === 'search' ||\n            type === 'tel' ||\n            type === 'text')\n        ) {\n          // Check value of `<input>`.\n          directionInferred = node.properties.value\n            ? directionBidi(String(node.properties.value))\n            : 'ltr'\n        } else {\n          // Check text nodes in `node`.\n          visit(node, inferDirectionality)\n        }\n      }\n\n      if (directionInferred) {\n        state.direction = directionInferred\n      }\n    }\n    // Turn off editing mode in non-HTML spaces.\n    else if (state.editableOrEditingHost) {\n      state.editableOrEditingHost = false\n    }\n  }\n\n  return reset\n\n  /**\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function reset() {\n    state.schema = schema\n    state.language = language\n    state.direction = currentDirection\n    state.editableOrEditingHost = editableOrEditingHost\n  }\n\n  /** @type {Visitor<ElementContent>} */\n  function inferDirectionality(child) {\n    if (child.type === 'text') {\n      directionInferred = directionBidi(child.value)\n      return directionInferred ? EXIT : undefined\n    }\n\n    if (\n      child !== node &&\n      child.type === 'element' &&\n      (child.tagName === 'bdi' ||\n        child.tagName === 'script' ||\n        child.tagName === 'style' ||\n        child.tagName === 'textare' ||\n        directionProperty(child))\n    ) {\n      return SKIP\n    }\n  }\n}\n\n/**\n * See `wooorm/direction`.\n *\n * @param {string} value\n *   Value to check.\n * @returns {Exclude<Direction, 'auto'> | undefined}\n *   Directionality.\n */\nfunction directionBidi(value) {\n  const result = direction(value)\n  return result === 'neutral' ? undefined : result\n}\n\n/**\n * @param {ElementContent} node\n *   Node to check.\n * @returns {Direction | undefined}\n *   Directionality.\n */\nfunction directionProperty(node) {\n  const value =\n    node.type === 'element' && typeof node.properties.dir === 'string'\n      ? node.properties.dir.toLowerCase()\n      : undefined\n\n  return value === 'auto' || value === 'ltr' || value === 'rtl'\n    ? value\n    : undefined\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,SAAS,QAAO,WAAW;AACnC,SAAQC,QAAQ,QAAO,qBAAqB;AAC5C,SAAQC,GAAG,QAAO,sBAAsB;AACxC,SAAQC,IAAI,EAAEC,IAAI,EAAEC,KAAK,QAAO,kBAAkB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAEC,IAAI,EAAE;EACtC,MAAMC,MAAM,GAAGF,KAAK,CAACE,MAAM;EAC3B,MAAMC,QAAQ,GAAGH,KAAK,CAACG,QAAQ;EAC/B,MAAMC,gBAAgB,GAAGJ,KAAK,CAACP,SAAS;EACxC,MAAMY,qBAAqB,GAAGL,KAAK,CAACK,qBAAqB;EACzD;EACA,IAAIC,iBAAiB;EAErB,IAAIL,IAAI,CAACM,IAAI,KAAK,SAAS,EAAE;IAC3B,MAAMC,IAAI,GAAGP,IAAI,CAACQ,UAAU,CAACC,OAAO,IAAIT,IAAI,CAACQ,UAAU,CAACD,IAAI;IAC5D,MAAMD,IAAI,GAAGN,IAAI,CAACQ,UAAU,CAACF,IAAI,IAAI,MAAM;IAC3C,MAAMd,SAAS,GAAGkB,iBAAiB,CAACV,IAAI,CAAC;IAEzC,IAAIO,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKI,SAAS,EAAE;MACvCZ,KAAK,CAACG,QAAQ,GAAGU,MAAM,CAACL,IAAI,CAAC;IAC/B;IAEA,IAAIN,MAAM,IAAIA,MAAM,CAACY,KAAK,KAAK,MAAM,EAAE;MACrC,IAAIb,IAAI,CAACQ,UAAU,CAACM,eAAe,KAAK,MAAM,EAAE;QAC9Cf,KAAK,CAACK,qBAAqB,GAAG,IAAI;MACpC;MAEA,IAAIJ,IAAI,CAACe,OAAO,KAAK,KAAK,EAAE;QAC1BhB,KAAK,CAACE,MAAM,GAAGP,GAAG;MACpB;;MAEA;MACA;MACA,IAAIF,SAAS,KAAK,KAAK,EAAE;QACvBa,iBAAiB,GAAGb,SAAS;MAC/B,CAAC,MAAM;MACL;MACAA,SAAS,KAAK,KAAK;MACnB;MACCA,SAAS,KAAK,MAAM,IAAIQ,IAAI,CAACe,OAAO,KAAK,MAAO;MACjD;MACCvB,SAAS,KAAK,MAAM,IAAIQ,IAAI,CAACe,OAAO,KAAK,OAAO,IAAIT,IAAI,KAAK,KAAM,EACpE;QACAD,iBAAiB,GAAG,KAAK;QACzB;MACF,CAAC,MAAM,IAAIb,SAAS,KAAK,MAAM,IAAIQ,IAAI,CAACe,OAAO,KAAK,KAAK,EAAE;QACzD,IAAIf,IAAI,CAACe,OAAO,KAAK,UAAU,EAAE;UAC/B;UACAV,iBAAiB,GAAGW,aAAa,CAACvB,QAAQ,CAACO,IAAI,CAAC,CAAC;QACnD,CAAC,MAAM,IACLA,IAAI,CAACe,OAAO,KAAK,OAAO,KACvBT,IAAI,KAAK,OAAO,IACfA,IAAI,KAAK,QAAQ,IACjBA,IAAI,KAAK,KAAK,IACdA,IAAI,KAAK,MAAM,CAAC,EAClB;UACA;UACAD,iBAAiB,GAAGL,IAAI,CAACQ,UAAU,CAACS,KAAK,GACrCD,aAAa,CAACJ,MAAM,CAACZ,IAAI,CAACQ,UAAU,CAACS,KAAK,CAAC,CAAC,GAC5C,KAAK;QACX,CAAC,MAAM;UACL;UACApB,KAAK,CAACG,IAAI,EAAEkB,mBAAmB,CAAC;QAClC;MACF;MAEA,IAAIb,iBAAiB,EAAE;QACrBN,KAAK,CAACP,SAAS,GAAGa,iBAAiB;MACrC;IACF;IACA;IAAA,KACK,IAAIN,KAAK,CAACK,qBAAqB,EAAE;MACpCL,KAAK,CAACK,qBAAqB,GAAG,KAAK;IACrC;EACF;EAEA,OAAOe,KAAK;;EAEZ;AACF;AACA;AACA;EACE,SAASA,KAAKA,CAAA,EAAG;IACfpB,KAAK,CAACE,MAAM,GAAGA,MAAM;IACrBF,KAAK,CAACG,QAAQ,GAAGA,QAAQ;IACzBH,KAAK,CAACP,SAAS,GAAGW,gBAAgB;IAClCJ,KAAK,CAACK,qBAAqB,GAAGA,qBAAqB;EACrD;;EAEA;EACA,SAASc,mBAAmBA,CAACE,KAAK,EAAE;IAClC,IAAIA,KAAK,CAACd,IAAI,KAAK,MAAM,EAAE;MACzBD,iBAAiB,GAAGW,aAAa,CAACI,KAAK,CAACH,KAAK,CAAC;MAC9C,OAAOZ,iBAAiB,GAAGV,IAAI,GAAGgB,SAAS;IAC7C;IAEA,IACES,KAAK,KAAKpB,IAAI,IACdoB,KAAK,CAACd,IAAI,KAAK,SAAS,KACvBc,KAAK,CAACL,OAAO,KAAK,KAAK,IACtBK,KAAK,CAACL,OAAO,KAAK,QAAQ,IAC1BK,KAAK,CAACL,OAAO,KAAK,OAAO,IACzBK,KAAK,CAACL,OAAO,KAAK,SAAS,IAC3BL,iBAAiB,CAACU,KAAK,CAAC,CAAC,EAC3B;MACA,OAAOxB,IAAI;IACb;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoB,aAAaA,CAACC,KAAK,EAAE;EAC5B,MAAMI,MAAM,GAAG7B,SAAS,CAACyB,KAAK,CAAC;EAC/B,OAAOI,MAAM,KAAK,SAAS,GAAGV,SAAS,GAAGU,MAAM;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASX,iBAAiBA,CAACV,IAAI,EAAE;EAC/B,MAAMiB,KAAK,GACTjB,IAAI,CAACM,IAAI,KAAK,SAAS,IAAI,OAAON,IAAI,CAACQ,UAAU,CAACc,GAAG,KAAK,QAAQ,GAC9DtB,IAAI,CAACQ,UAAU,CAACc,GAAG,CAACC,WAAW,CAAC,CAAC,GACjCZ,SAAS;EAEf,OAAOM,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,KAAK,GACzDA,KAAK,GACLN,SAAS;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}