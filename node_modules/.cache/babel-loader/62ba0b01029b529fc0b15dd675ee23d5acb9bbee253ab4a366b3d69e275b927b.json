{"ast":null,"code":"/**\n * @import {AstAttribute} from 'css-selector-parser'\n * @import {Element, Properties} from 'hast'\n * @import {Info, Schema} from 'property-information'\n */\n\nimport { stringify as commas } from 'comma-separated-tokens';\nimport { ok as assert } from 'devlop';\nimport { find } from 'property-information';\nimport * as spaces from 'space-separated-tokens';\n\n/**\n * @param {AstAttribute} query\n *   Query.\n * @param {Element} element\n *   Element.\n * @param {Schema} schema\n *   Schema of element.\n * @returns {boolean}\n *   Whether `element` matches `query`.\n */\nexport function attribute(query, element, schema) {\n  const info = find(schema, query.name);\n  const propertyValue = element.properties[info.property];\n  let value = normalizeValue(propertyValue, info);\n\n  // Exists.\n  if (!query.value) {\n    return value !== undefined;\n  }\n  assert(query.value.type === 'String', 'expected plain string');\n  let key = query.value.value;\n\n  // Case-sensitivity.\n  if (query.caseSensitivityModifier === 'i') {\n    key = key.toLowerCase();\n    if (value) {\n      value = value.toLowerCase();\n    }\n  }\n  if (value !== undefined) {\n    switch (query.operator) {\n      // Exact.\n      case '=':\n        {\n          return key === value;\n        }\n\n      // Ends.\n      case '$=':\n        {\n          return key === value.slice(-key.length);\n        }\n\n      // Contains.\n      case '*=':\n        {\n          return value.includes(key);\n        }\n\n      // Begins.\n      case '^=':\n        {\n          return key === value.slice(0, key.length);\n        }\n\n      // Exact or prefix.\n      case '|=':\n        {\n          return key === value || key === value.slice(0, key.length) && value.charAt(key.length) === '-';\n        }\n\n      // Space-separated list.\n      case '~=':\n        {\n          return (\n            // For all other values (including comma-separated lists), return whether this\n            // is an exact match.\n            key === value ||\n            // If this is a space-separated list, and the query is contained in it, return\n            // true.\n            spaces.parse(value).includes(key)\n          );\n        }\n      // Other values are not yet supported by CSS.\n      // No default\n    }\n  }\n  return false;\n}\n\n/**\n *\n * @param {Properties[keyof Properties]} value\n * @param {Info} info\n * @returns {string | undefined}\n */\nfunction normalizeValue(value, info) {\n  if (value === null || value === undefined) {\n    // Empty.\n  } else if (typeof value === 'boolean') {\n    if (value) {\n      return info.attribute;\n    }\n  } else if (Array.isArray(value)) {\n    if (value.length > 0) {\n      return (info.commaSeparated ? commas : spaces.stringify)(value);\n    }\n  } else {\n    return String(value);\n  }\n}","map":{"version":3,"names":["stringify","commas","ok","assert","find","spaces","attribute","query","element","schema","info","name","propertyValue","properties","property","value","normalizeValue","undefined","type","key","caseSensitivityModifier","toLowerCase","operator","slice","length","includes","charAt","parse","Array","isArray","commaSeparated","String"],"sources":["/Users/mubarakmuse/Abubakar-Islamic-Institute-LMS/node_modules/hast-util-select/lib/attribute.js"],"sourcesContent":["/**\n * @import {AstAttribute} from 'css-selector-parser'\n * @import {Element, Properties} from 'hast'\n * @import {Info, Schema} from 'property-information'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {find} from 'property-information'\nimport * as spaces from 'space-separated-tokens'\n\n/**\n * @param {AstAttribute} query\n *   Query.\n * @param {Element} element\n *   Element.\n * @param {Schema} schema\n *   Schema of element.\n * @returns {boolean}\n *   Whether `element` matches `query`.\n */\nexport function attribute(query, element, schema) {\n  const info = find(schema, query.name)\n  const propertyValue = element.properties[info.property]\n  let value = normalizeValue(propertyValue, info)\n\n  // Exists.\n  if (!query.value) {\n    return value !== undefined\n  }\n\n  assert(query.value.type === 'String', 'expected plain string')\n  let key = query.value.value\n\n  // Case-sensitivity.\n  if (query.caseSensitivityModifier === 'i') {\n    key = key.toLowerCase()\n\n    if (value) {\n      value = value.toLowerCase()\n    }\n  }\n\n  if (value !== undefined) {\n    switch (query.operator) {\n      // Exact.\n      case '=': {\n        return key === value\n      }\n\n      // Ends.\n      case '$=': {\n        return key === value.slice(-key.length)\n      }\n\n      // Contains.\n      case '*=': {\n        return value.includes(key)\n      }\n\n      // Begins.\n      case '^=': {\n        return key === value.slice(0, key.length)\n      }\n\n      // Exact or prefix.\n      case '|=': {\n        return (\n          key === value ||\n          (key === value.slice(0, key.length) &&\n            value.charAt(key.length) === '-')\n        )\n      }\n\n      // Space-separated list.\n      case '~=': {\n        return (\n          // For all other values (including comma-separated lists), return whether this\n          // is an exact match.\n          key === value ||\n          // If this is a space-separated list, and the query is contained in it, return\n          // true.\n          spaces.parse(value).includes(key)\n        )\n      }\n      // Other values are not yet supported by CSS.\n      // No default\n    }\n  }\n\n  return false\n}\n\n/**\n *\n * @param {Properties[keyof Properties]} value\n * @param {Info} info\n * @returns {string | undefined}\n */\nfunction normalizeValue(value, info) {\n  if (value === null || value === undefined) {\n    // Empty.\n  } else if (typeof value === 'boolean') {\n    if (value) {\n      return info.attribute\n    }\n  } else if (Array.isArray(value)) {\n    if (value.length > 0) {\n      return (info.commaSeparated ? commas : spaces.stringify)(value)\n    }\n  } else {\n    return String(value)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}