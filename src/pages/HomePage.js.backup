import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';

export default function HomePage() {
  const [levels, setLevels] = useState([]);
  const [userLevels, setUserLevels] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [userData, setUserData] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    // Get user data
    const authData = sessionStorage.getItem('user_auth');
    if (authData) {
      const { user } = JSON.parse(authData);
      setUserData(user);
    }

    fetchLevels();
  }, []);

  const fetchLevels = async () => {
    try {
      setLoading(true);
      
      // If user is a student, fetch their enrolled levels
      if (userData?.role === 'student') {
        const { data: enrollmentData, error: enrollmentError } = await supabase
          .from('student_enrollment')
          .select('level_code, level:levels(*)')
          .eq('student_id', userData.id);

        if (enrollmentError) throw enrollmentError;
        setUserLevels(enrollmentData?.map(item => item.level) || []);
      }
      // If user is a teacher, fetch only the levels they teach
      else if (userData?.role === 'instructor') {
        const { data: levelsData, error: levelsError } = await supabase
          .from('levels')
          .select('*')
          .eq('teacher_id', userData.id)
          .order('name', { ascending: true });

        if (levelsError) throw levelsError;
        setLevels(levelsData || []);
      }
      // For other roles (admin, etc.), fetch all levels
      else {
        const { data: levelsData, error: levelsError } = await supabase
          .from('levels')
          .select('*')
          .order('name', { ascending: true });

        if (levelsError) throw levelsError;
        setLevels(levelsData || []);
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary-50 via-secondary-50 to-neutral-50 flex items-center justify-center">
        <div className="flex flex-col items-center gap-6 animate-fade-in">
          <div className="w-16 h-16 loading-spinner"></div>
          <div className="text-center">
            <p className="text-primary-600 font-semibold text-lg">Loading Classes...</p>
            <p className="text-neutral-500 text-sm mt-1">Fetching your available levels</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary-50 via-secondary-50 to-neutral-50 flex items-center justify-center container-mobile">
        <div className="card p-8 max-w-md w-full text-center animate-slide-up">
          <div className="w-16 h-16 bg-error-100 rounded-2xl flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-error-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h2 className="text-xl font-bold text-neutral-900 mb-2">Oops! Something went wrong</h2>
          <p className="text-neutral-600 mb-6">Error loading levels: {error}</p>
          <button
            onClick={() => window.location.reload()}
            className="btn-primary"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  const displayLevels = userData?.role === 'student' ? userLevels : levels;

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary-50 via-secondary-50 to-neutral-50">
      {/* Hero Section */}
      <section className="container-mobile py-12 sm:py-16 lg:py-20">
        <div className="text-center max-w-4xl mx-auto animate-fade-in">
          <div className="w-20 h-20 bg-gradient-to-br from-primary-500 to-secondary-500 rounded-3xl flex items-center justify-center mx-auto mb-6">
            <svg className="w-10 h-10 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
            </svg>
          </div>
          
          <h1 className="heading-responsive text-gradient mb-4">
            Abubakar Islamic Institute
          </h1>
          <p className="text-lg sm:text-xl text-neutral-600 mb-8 max-w-2xl mx-auto">
            {userData?.role === 'student' 
              ? `Welcome back, ${userData.name?.split(' ')[0]}! Access your classes and track your progress.`
              : 'Student Portal - Access your classes, assignments, grades, and communicate with teachers'
            }
          </p>
        </div>
      </section>

      {/* Classes Section */}
      <section className="container-mobile pb-12 sm:pb-16 lg:pb-20">
        <div className="text-center mb-12 animate-slide-up">
          <h2 className="heading-responsive text-neutral-900 mb-4">
            {userData?.role === 'student' ? 'Your Classes' : 'Available Classes'}
          </h2>
          <p className="text-lg text-neutral-600 max-w-2xl mx-auto">
            {userData?.role === 'student' 
              ? 'Select a class to view updates, assignments, grades, and attendance'
              : 'Select a class to view or post updates'
            }
          </p>
        </div>

        {displayLevels.length === 0 ? (
          <div className="text-center py-16 animate-fade-in">
            <div className="w-24 h-24 bg-neutral-100 rounded-3xl flex items-center justify-center mx-auto mb-6">
              <svg className="w-12 h-12 text-neutral-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
              </svg>
            </div>
            <h3 className="text-xl font-bold text-neutral-900 mb-2">
              {userData?.role === 'student' ? 'No classes enrolled' : 'No classes available'}
            </h3>
            <p className="text-neutral-500">
              {userData?.role === 'student' 
                ? 'You are not enrolled in any classes yet. Contact your teacher for access.'
                : 'No classroom levels have been created yet.'
              }
            </p>
          </div>
        ) : (
          <div className="grid-responsive">
            {displayLevels.map((level, index) => (
              <div 
                key={level.id}
                onClick={() => navigate(`/level/${level.code}`)}
                className="card-hover cursor-pointer group animate-slide-up"
                style={{ animationDelay: `${index * 100}ms` }}
              >
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-12 h-12 bg-gradient-to-br from-primary-500 to-secondary-500 rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
                      <svg className="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                      </svg>
                    </div>
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                      <svg className="w-5 h-5 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                      </svg>
                    </div>
                  </div>
                  
                  <h3 className="text-lg font-bold text-neutral-900 mb-2 group-hover:text-primary-600 transition-colors duration-200">
                    {level.name}
                  </h3>
                  
                  <div className="space-y-2">
                    <div className="flex items-center text-sm text-neutral-500">
                      <svg className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                      </svg>
                      Level: {level.level || 'N/A'}
                    </div>
                    
                    {level.period && (
                      <div className="flex items-center text-sm text-neutral-500">
                        <svg className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Period: {level.period}
                      </div>
                    )}
                  </div>
                  
                  <div className="mt-4 pt-4 border-t border-neutral-100">
                    <span className="text-sm font-medium text-primary-600 group-hover:text-primary-700">
                      {userData?.role === 'student' ? 'View Class & Grades â†’' : 'View Class â†’'}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </section>

      {/* Quick Access for Students */}
      {userData?.role === 'student' && userLevels.length > 0 && (
        <section className="container-mobile pb-12 sm:pb-16 lg:pb-20">
          <div className="text-center mb-8 animate-slide-up">
            <h2 className="text-xl font-bold text-neutral-900 mb-2">Quick Access</h2>
            <p className="text-neutral-600">Jump directly to your most recent class</p>
          </div>
          
          <div className="flex justify-center">
            <button
              onClick={() => navigate(`/level/${userLevels[0].code}`)}
              className="btn-primary px-8 py-4 text-lg font-semibold"
            >
              <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
              </svg>
              Go to {userLevels[0].name}
            </button>
          </div>
        </section>
      )}
    </div>
  );
}
